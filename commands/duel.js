const { Client, Message, MessageEmbed } = require('discord.js');

module.exports = {
    name: 'duel',
    /** 
     * @param {Client} client 
     * @param {Message} message 
     * @param {String[]} args 
     */
    run: async(client, message, args) => {
        //! duel 1000 @sashking

        const invalidUseEmbed = new MessageEmbed()
			.setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
			.setDescription('–ü—Ä–∏–≤–µ–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n\n–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:\n`duel <—Å—É–º–º–∞> <—É—á–∞—Å—Ç–Ω–∏–∫>`')
			.setColor('F93A2F')
			.setTimestamp();
        
        const minimalAmountEmbed = new MessageEmbed()
			.setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
			.setDescription(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${client.emoji} 1`)
			.setColor('F93A2F')
			.setTimestamp();

        let bet = args[0];
        const opponent = message.mentions.members.first();

        if (!bet || !opponent) return message.channel.send(invalidUseEmbed);
        if (isNaN(bet)) return message.channel.send(invalidUseEmbed);
        if (parseInt(bet) < 1) return message.channel.send(minimalAmountEmbed);

        bet = parseInt(args[0]);

        if (opponent.id === message.author.id) {
            return message.channel.send(
                new MessageEmbed()
                    .setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
                    .setDescription(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!`)
                    .setColor('F93A2F')
			        .setTimestamp()
            )
        }

        if (bet > await client.balance(message.author.id, 'cash', message)) {
            return message.channel.send(
                new MessageEmbed()
                    .setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
                    .setDescription(`–£ –≤–∞—Å –Ω–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥!`)
                    .setColor('F93A2F')
			        .setTimestamp()
            )
        }

        if (bet > await client.balance(opponent.id, 'cash', message)) {
            return message.channel.send(
                new MessageEmbed()
                    .setAuthor(opponent.user.tag, opponent.user.displayAvatarURL({ dynamic: true }))
                    .setDescription(`–£ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥!`)
                    .setColor('F93A2F')
                    .setTimestamp()
            )
        }

        const requestEmbed = new MessageEmbed()
            .setDescription(`**${message.author.username}** –±—Ä–æ—Å–∏–ª –≤–∞–º –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å. –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –µ–≥–æ –≤—ã–∑–æ–≤? (yes/no)`)
            .setColor('00D166')
            .setTimestamp();

        message.channel.send(opponent, requestEmbed)
            .then(() => {
                message.channel.awaitMessages(response => response.content == 'yes' && response.author.id == opponent.id || response.content == 'no' && response.author.id == opponent.id, {
                    max: 1,
                    time: 60000,
                    errors: [ 'time' ],
                })
                .then((collected) => {
                    if (collected.first().content == 'yes') {
                        //! yes
                        const gameEmbed = new MessageEmbed()
                            .setTitle(`\`${message.author.username}\` vs \`${opponent.user.username}\``)
                            .setDescription(`*–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ \`shoot\` –±–æ–ª—å—à–µ —Ä–∞–∑ —á–µ–º –≤–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫! –£ –≤–∞—Å –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥*`)
                            .setColor('F8C300')
                            .setTimestamp()

                        message.channel.send(gameEmbed)
                            .then(() => {
                                const filter = m => m.author.id === message.author.id && m.content === "shoot" || m.author.id === opponent.user.id && m.content === "shoot";
                                const collector = message.channel.createMessageCollector(filter, { time: 10000 });

                                let authorPoints = 0;
                                let opponentPoints = 0;

                                collector.on('collect', m => {
                                    if (m.author.id === message.author.id) {
                                        authorPoints++;
                                    } else if (m.author.id === opponent.user.id) {
                                        opponentPoints++;
                                    }
                                });
                                
                                collector.on('end', async collected => {
                                    // if author won
                                    if (authorPoints > opponentPoints) {
                                        await client.remove(opponent.user.id, bet, 'cash', message);
                                        await client.add(message.author.id, bet, 'cash', message);

                                        message.channel.send(
                                            new MessageEmbed()
                                                .setDescription(`${message.author} –ø–æ–±–µ–¥–∏–ª (${authorPoints} –±–∞–ª–ª–∞/–æ–≤) –Ω–∞–¥ **${opponent.user.username}** (${opponentPoints} –±–∞–ª–ª–∞/–æ–≤)\n\n+ ${client.emoji} ${bet}`)
                                                .setColor('A652BB')
                                                .setTimestamp()
                                        )
                                    // if opponent won
                                    } else if (opponentPoints > authorPoints) {
                                        await client.remove(message.author.id, bet, 'cash', message);
                                        await client.add(opponent.user.id, bet, 'cash', message);

                                        message.channel.send(
                                            new MessageEmbed()
                                                .setDescription(`${opponent.user} –ø–æ–±–µ–¥–∏–ª (${opponentPoints} –±–∞–ª–ª–∞/–æ–≤) –Ω–∞–¥ **${message.author.username}** (${authorPoints} –±–∞–ª–ª–∞/–æ–≤)\n\n+ ${client.emoji} ${bet}`)
                                                .setColor('A652BB')
                                                .setTimestamp()
                                        )
                                    // if it is a tie 
                                    } else {
                                        message.channel.send(
                                            new MessageEmbed()
                                                .setDescription(`–ù–∏—á—å—è ü§∑‚Äç‚ôÇÔ∏è\n\n+ ${client.emoji} 0`)
                                                .setColor('FD0061')
                                                .setTimestamp()
                                        )
                                    }
                                });
                            })
                    
                    } else if(collected.first().content == 'no') {
                        return message.channel.send(
                            new MessageEmbed()
                                .setAuthor(message.author.tag, message.author.displayAvatarURL({ dynamic: true }))
                                .setDescription(`${opponent} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –≤—ã–∑–æ–≤!`)
                                .setColor('F93A2F')
                                .setTimestamp()
                        );
                    }
                })
                .catch(() => {
                    message.channel.send(`–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞. –ë–æ–π –æ—Ç–º–µ–Ω–µ–Ω.`);
                });
            });
    }
}